import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import pandas as pd

# Assuming you have a dataset named 'accident_data.csv'
Dataset = {
    'Speed_limit': [60, 50, 80, 100, 70, 90, 75, 110, 40, 20, 120, 35],
    'Number_of_vehicles_involved': [2, 2, 1, 1, 1, 2, 3, 4, 1, 2, 2, 1],
    'Traffic_lights': [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1],
    'Time_of_the_day': [0, 2, 1, 2, 1, 0, 2, 0, 2, 1, 1, 2],
    'Condition_of_the_roads': [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1],
    'Severity_of_accidents': [1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 1, 1]
}

df = pd.DataFrame(Dataset)
print(df)

# Creating a DataFrame
df = pd.DataFrame(Dataset)

# Define dependent and independent variables
X = df[['Condition_of_the_roads', 'Speed_limit', 'Time_of_the_day', 'Traffic_lights', 'Number_of_vehicles_involved']]
y = df['Severity_of_accidents']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
varAny = mean_squared_error(y_test, y_pred)
print(f'\n Mean Squared Error :\n {varAny}')

# Now, let's use the model to predict accident severity for a hypothetical set of independent variables
hypothetical_data = pd.DataFrame({
    'Condition_of_the_roads': [1],
    'Speed_limit': [45],
    'Time_of_the_day': [2],
    'Traffic_lights': [1],
    'Number_of_vehicles_involved': [2]
})

predicted_severity = model.predict(hypothetical_data)
print(f' \n Predicted Accident Severity :\n {predicted_severity[0]}')
